#!/bin/bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
exec >oslat-client-stderrout.txt
exec 2>&1

function convert_number_range() {
        # converts a range of cpus, like "1-3,5" to a list, like "1,2,3,5"
        local cpu_range=$1
        local cpus_list=""
        local cpus=""
        for cpus in `echo "$cpu_range" | sed -e 's/,/ /g'`; do
                if echo "$cpus" | grep -q -- "-"; then
                        cpus=`echo $cpus | sed -e 's/-/ /'`
                        cpus=`seq $cpus | sed -e 's/ /,/g'`
                fi
                for cpu in $cpus; do
                        cpus_list="$cpus_list,$cpu"
                done
        done
        cpus_list=`echo $cpus_list | sed -e 's/^,//'`
        echo "$cpus_list"
}

function disable_balance()
{
    local cpulist="$1"; shift
	local cpu=""
	local file=
	local flags_cur=
	for cpu in `echo ${cpulist} | sed -e 's/,/ /g'`; do
		for file in $(find /proc/sys/kernel/sched_domain/cpu$cpu -name flags -print); do
			flags_cur=$(cat $file)
			flags_cur=$((flags_cur & 0xfffe))
			echo $flags_cur > $file
		done
	done
}

function enable_balance()
{
    local cpulist="$1"; shift
	local cpu=""
	local file=
	local flags_cur=
	for cpu in `echo ${cpulist} | sed -e 's/,/ /g'`; do
		for file in $(find /proc/sys/kernel/sched_domain/cpu$cpu -name flags -print); do
			flags_cur=$(cat $file)
			flags_cur=$((flags_cur | 0x1))
			echo $flags_cur > $file
		done
	done
}

echo "args: $@"
if [ -z "$RS_CS_LABEL" ]; then
    echo "RS_CS_LABEL is not defined, exiting"
    exit 1
else
    echo "RS_CS_LABEL: $RS_CS_LABEL"
fi
echo "hostname: `hostname`"

no_load_balance=0
rtprio_opt=""
max_cpus=""
runtime=300
cpu_range=`cat /proc/self/status | grep Cpus_allowed_list: | cut -f 2`

opts=$(getopt -q -o "" --longoptions "cpu-range:,no-load-balance:,rtprio:,runtime:" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    printf -- "\tUnrecognized option specified\n\n"
    exit 1
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --no-load-balance)
            shift;
            no_load_balance=$1
            shift;
            ;;
        --rtprio)
            shift;
            # TODO: exit if not between 1-99
            rtprio_opt="--rtprio $1"
            shift;
            ;;
        --runtime)
            shift;
            runtime=$1
            shift;
            ;;
        --cpu-range)
            shift;
            cpu_range=$1
            shift;
            ;;
        --)
            shift;
            break
            ;;
        *)
            echo "Invalid option: $1"
            exit 1
    esac
done

cpus=""
cpus_list=""
for cpus in `echo "$cpu_range" | sed -e 's/,/ /g'`; do
        if echo "$cpus" | grep -q -- "-"; then
                cpus=`echo $cpus | sed -e 's/-/ /'`
                cpus=`seq $cpus | sed -e 's/ /,/g'`
        fi
        for cpu in $cpus; do
                cpus_list="$cpus_list,$cpu"
        done
done
cpus_list=`echo $cpus_list | sed -e s/^,//`

if [ "$no_load_balance" == "1" ]; then
     disable_balance $cpus_list
fi

master_cpu=`echo $cpus_list | awk -F, '{print $1}'`
worker_cpus=`echo $cpus_list | sed -e s/^$master_cpu,//`

cmd="oslat --runtime $runtime $rtprio_opt --cpu-list $worker_cpus"
echo "Going to execute $cmd"
$cmd
rc=$?

if [ "$no_load_balance" == "1" ]; then
     enable_balance $cpus_list
fi
exit $rc
